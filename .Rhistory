demo()
library(datasets)
data(iris)
?iris
iris
head(iris)
colMeans(iris, na.rm = T)
?colMeans
colMeans(iris[iris$Species == "virginica",], na.rm = T)
colMeans(iris[iris$Species == "virginica",1:4], na.rm = T)
mean(iris[iris$Species == "virginica",1], na.rm = T)
mean(iris[iris$Species == "virginica",1:1], na.rm = T)
split(iris)
split(iris, iris$Species)
?tapply
tapply(iris, iris$Species)
tapply(iris, iris$Species, collMeans)
tapply(iris, iris$Species, colMeans)
tapply(iris$Species, iris, colMeans)
tapply(iris$Species, iris[,-1], colMeans)
values <- c(1,2,3,4,5,6,7)
mean(values)
?mean
tapply(iris$Species, iris[,-1], colMeans)
colMeans(iris[iris$Species == "virginica",1:4], na.rm = T)
split(iris, iris$Species)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
split(iris, iris$Species)
split(iris, iris$Species
;
split(iris, iris$Species
;
tapply(iris, iris$Species
;
gl(2, 4)
gl(2, 8)
iris$Sp
c(rnorm(10), runif(10), rnorm(10, 1))
lapply(split(iris, iris$Species), colMeans)
f <- function(x) colMeans(x[,1:4])
lapply(split(iris, iris$Species), f)
sapply(split(iris, iris$Species), f)
tapply(iris, iris$Species, f)
nrow(iris)
length(iris$Species)
tapply(iris[,], iris$Species, f)
tapply(iris[,1:5], iris$Species, f)
tapply(iris[,-1], iris$Species, f)
sapply(iris[,-1], iris$Species, f)
sapply(iris[,-1], iris$Species, f)apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, -1], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
length(split(mtcars$mpg, mtcars$cyl))
lapply(split(mtcars$mpg, mtcars$cyl), length)
lapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars$mpg, mtcars$cyl)
lapply(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(iris[,1:5], iris$Species, f)
data(iris)
with(iris, tapply(Sepal.Length, Species, f))
f <- function(x) colMeans(x[,1:4])
with(iris, tapply(Sepal.Length, Species, f))
with(iris, tapply(Sepal.Length, Species, mean))
sapply(iris[,-1], iris$Species, f)
sapply(split(iris, iris$Species), f)
sapply(split(iris$Sepal.Length, iris$Species), f)
sapply(split(iris$Sepal.Length, iris$Species), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris, iris$Species, mean)
sapply(split(iris$Sepal.Length, iris$Species), mean)
sapply(split(iris, iris$Species), mean)
sapply(split(iris[1:4], iris$Species), mean)
sapply(split(iris[,1:4], iris$Species), mean)
sapply(split(iris[,1:4], iris$Species), na.rm = T, mean)
sapply(split(iris[,-1], iris$Species), na.rm = T, mean)
with(mtcars, tapply(mpg, cyl, mean))
diff(with(mtcars, tapply(mpg, cyl, mean)))
?diff
diff(1:10, 2)
diff(1:10, 1)
diff(1:10, 0)
diff(1:10, 1)
diff(1:10, 2)
diff(1:10, 2, 2)
diff(1:10, differences = 2)
with(mtcars, tapply(mpg, cyl, mean))
diff(with(mtcars, tapply(mpg, cyl, mean)))
diff(with(mtcars, tapply(mpg, cyl, mean)), 2)
26.66364 - 11.56364
?mtcars
with(mtcars, tapply(hp, cyl, mean))
diff(with(mtcars, tapply(hp, cyl, mean)), 2)
sapply(split(iris$Sepal.Length, iris$Species), mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
setwd("~/Workspace/ProgrammingAssignment2")
source('~/Workspace/ProgrammingAssignment2/cachematrix.R')
?"matrix"
matrix(1:9, 3 ,3)
m <- matrix(1:9, 3 ,3)
m
cm <- makeCacheMatrix(m)
cm$get()
cm$getinverse()
cacheSolve(cm)
debug(cacheSolve)
cacheSolve(cm)
?solve
source('~/Workspace/ProgrammingAssignment2/cachematrix.R')
cacheSolve(cm)
m <- matrix(1:100*100, 100, 100)
cm <- makeCacheMatrix(m)
cacheSolve(cm)
m <- matrix(c(rnorm(3), runif(3), rnorm(3, 1)), 3, 3)
cm <- makeCacheMatrix(m)
cacheSolve(cm)
m
im <- cacheSolve(cm)
cacheSolve(cm)
icm <- makeCacheMatrix(im)
cacheSolve(icm)
cacheSolve(icm)
m
cacheSolve(icm)
source('~/Workspace/ProgrammingAssignment2/cachematrix.R')
m <- matrix(c(rnorm(3), runif(3), rnorm(3, 1)), 3, 3)
cm <- makeCacheMatrix(m)
cm
im <- cacheSolve(cm)
im
icm <- makeCacheMatrix(im)
cacheSolve(icm)
cacheSolve(icm)
m
m <- matrix(c(rnorm(3), runif(3), rnorm(3, 1)), 3, 3)
m
cm <- makeCacheMatrix(m)
cacheSolve(cm)
im <- cacheSolve(cm)
im
icm <- makeCacheMatrix(im)
cacheSolve(icm)
cacheSolve(icm)
m <- matrix(c(rnorm(3), runif(3), rnorm(3, 1)), 3, 3)
m
cm <- makeCacheMatrix(m)
cm$get
cacheSolve(cm)
im <- cacheSolve(cm)
im
icm <- makeCacheMatrix(im)
icm$get
cacheSolve(icm)
cacheSolve(icm)
m <- matrix(c(rnorm(3), runif(3), rnorm(3, 1)), 3, 3)
m
cm <- makeCacheMatrix(m)
cm$get()
cacheSolve(cm)
im <- cacheSolve(cm)
im
icm <- makeCacheMatrix(im)
icm$get()
cacheSolve(icm)
cacheSolve(icm)
